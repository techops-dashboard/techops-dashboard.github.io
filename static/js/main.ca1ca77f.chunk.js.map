{"version":3,"sources":["panels/data sync /^/.//.*/.json$","panels/CommentBox.js","panels/Summary.js","panels/DiskPools.js","panels/panels.js","Clock.js","Login.js","App.js","index.js","panels/Priority.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","useStyles","makeStyles","theme","paper","padding","spacing","CommentBox","state","showComments","comments","require","Grid","container","addComment","this","bind","getComments","body","console","log","setState","concat","index","spliced","splice","comment","Comment","deleteComment","React","Component","CommentForm","item","xs","TextField","label","variant","multiline","rows","fullWidth","required","inputRef","Button","color","size","startIcon","Save","onClick","handleSubmit","event","preventDefault","props","value","classes","Paper","className","Typography","style","whiteSpace","Delete","root","flexGrow","textAlign","AutoGrid","panels","panel","setValue","backgroundColor","Content","autoHeight","DiskPools","bool","icon","DiscFull","filter","row","includes","attributes","storageType","name","usage","usedCapacityBytes","totalCapacityBytes","columns","field","width","valueFormatter","params","valueFormatted","Number","toLocaleString","length","content","getCellClassName","sortModel","sort","header","Tapes","Storage","StorageServers","status","storageServerState","Jobs","Backup","jobId","clientName","split","key","Temp","x","StickyNotes","Create","getPanels","a","Promise","all","Priority","Clock","date","Date","timerID","setInterval","tick","clearInterval","toLocaleTimeString","oauth2","display","margin","small","height","large","Login","useState","image","setImage","clientId","web","client_id","buttonText","onLogoutSuccess","response","setLoggedin","render","renderProps","disabled","Avatar","src","onSuccess","profileObj","imageUrl","email","endsWith","cookiePolicy","light","palette","type","dark","rootElement","document","getElementById","ReactDOM","axios","snowurl","creds","user","userName","pwd","password","headers","Buffer","from","toString","n","active","priority","assignment_group","get","then","resp","data","result","catch","error","number","description","short_description"],"mappings":"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","file":"static/js/main.ca1ca77f.chunk.js","sourcesContent":["var map = {\n\t\"./DiskPools.json\": 169,\n\t\"./Jobs.json\": 170,\n\t\"./Notes.json\": 100,\n\t\"./Priority1.json\": 171,\n\t\"./Priority2.json\": 172,\n\t\"./Slim.json\": 173,\n\t\"./StorageServers.json\": 174,\n\t\"./StorageUnits.json\": 80\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 110;","import React from \"react\";\nimport { Grid, Paper, TextField, Button, Typography } from '@material-ui/core';\nimport { Delete, Save } from '@material-ui/icons';\nimport { makeStyles } from '@material-ui/core/styles';\n\n// https://codepen.io/bhsrns/pen/dybMyRR?editors=0010\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        padding: theme.spacing(1),\n    },\n}));\n\nclass CommentBox extends React.Component {\n    constructor() {\n        super();\n        \n        this.state = {\n            showComments: true,\n            comments: require('./data/Notes.json')\n        };\n    }\n    \n    render () {\n        return(\n            <Grid container spacing={3}>\n                <CommentForm addComment={this.addComment.bind(this)}/>\n                {this.getComments()}\n            </Grid> \n        );\n    } // end render\n    \n    addComment(body) {\n        console.log(body);\n        this.setState({ comments: this.state.comments.concat([body]) }); // *new array references help React stay fast, so concat works better than push here.\n    }\n    \n    deleteComment(index) {\n        var spliced = [...this.state.comments]\n        spliced.splice(index, 1)\n        this.setState({ comments: spliced }); // *new array references help React stay fast, so concat works better than push here.\n    }\n    \n    getComments() {        \n        return (\n            this.state.comments.map((comment, index) => (\n                <Comment \n                    id={index}\n                    body={comment}\n                    deleteComment={this.deleteComment.bind(this)}\n                />\n            ))\n        );\n    }\n} // end CommentBox component\n\nclass CommentForm extends React.Component {\n    render() {\n        return (\n            <Grid item xs={3}>\n                <TextField \n                    label=\"Write Note\"\n                    variant='outlined'\n                    multiline\n                    rows={8}\n                    fullWidth\n                    required\n                    inputRef={(e) => this.body = e}\n                />\n                <br />\n\n                <Button\n                    color=\"primary\"\n                    size=\"small\"\n                    startIcon={<Save />}\n                    onClick={this.handleSubmit.bind(this)}\n                >\n                    Save\n                </Button>\n            </Grid>\n        );\n    } // end render\n    \n    handleSubmit(event) { \n        event.preventDefault();     // prevents page from reloading on submit\n        this.props.addComment(this.body.value);\n    }\n} // end CommentForm component\n\nfunction Comment(props) {\n    const classes = useStyles();\n    return (\n        <Grid item xs={3}>\n            <Paper className={classes.paper}>\n                <Typography variant='h6' style={{ whiteSpace: 'pre-wrap' }}>\n                    {props.body}\n                </Typography>\n                <br />\n\n                <Button\n                    color=\"secondary\"\n                    startIcon={<Delete />}\n                    onClick={() => props.deleteComment(props.id)}\n                >\n                    Delete\n                </Button>\n            </Paper>\n        </Grid>\n    );\n}\n\nexport default CommentBox;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Paper, Grid, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'center',\n    },\n}));\n\nexport default function AutoGrid(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={1}>\n                {props.panels.map(panel => (\n                    <Grid item xs onClick={() => props.setValue(panel.label)}>\n                        <Paper\n                            style={{backgroundColor: panel.color}}\n                            className={classes.paper}\n                        >\n                            <Typography variant='h6'>\n                                {panel.label}\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                ))}\n            </Grid>\n        </div>\n    );\n}\n","import React from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { Menu, ChevronLeft, Brightness3, Brightness7, Create, DiscFull, Backup, Storage, PriorityHigh } from '@material-ui/icons';\nimport { DataGrid } from '@material-ui/data-grid';\n\nconst useStyles = makeStyles({\n    root: {\n        '& .UP': { backgroundColor: 'green' },\n        '& .DOWN': { backgroundColor: 'red' },\n    },\n});\n\nfunction Content(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <DataGrid { ...props } autoHeight />\n        </div>\n    );\n}\n\nfunction DiskPools(bool) {\n    const icon = <DiscFull />;\n    const label = bool ? 'AppDiskPools' : 'ServerDiskPools';\n    const data = require('./data/StorageUnits.json')\n        .filter(row => (\n            row.id.includes('sym') === bool && \n            row.attributes.storageType === 'Disk'\n        ));\n\n    const rows = data.map((row, id) => ({\n        id: id,\n        name: row.attributes.name,\n        usage: row.attributes.usedCapacityBytes / row.attributes.totalCapacityBytes,\n    }));\n    const columns = [\n        { field: 'id' },\n        { field: 'name', width: 144 },\n        { \n            field: 'usage', \n            valueFormatter: (params) => {\n                const valueFormatted = Number(params.value * 100).toLocaleString();\n                return `${valueFormatted} %`;\n            },\n        }\n    ]\n\n    const length = rows.filter(row => row.usage > 0.8).length;\n    const color = length ? 'red' : 'green'\n\n    const content = <Content \n        rows={rows} columns={columns}\n        getCellClassName={params => {\n            if (params.field === 'usage'){\n                return params.value < 0.8 ? 'UP' : 'DOWN';\n            }\n        }}\n        sortModel={[\n            {\n                field: 'usage',\n                sort: 'desc',\n            },\n        ]}\n    />;\n    const header = length + ' / ' + rows.length + ' high-usage ' + label;\n\n    return { icon, label, color, content, header };\n}\n\nfunction Tapes() {\n    const icon = <Storage />;\n    const label = 'Tapes';\n    const data = require('./data/StorageUnits.json')\n        .filter(row => row.attributes.storageType === 'Tape');\n\n    const rows = data.map((row, id) => ({\n        id: id,\n        name: row.attributes.name,\n        usage: row.attributes.usedCapacityBytes / row.attributes.totalCapacityBytes,\n    }));\n    const columns = [\n        { field: 'id' },\n        { field: 'name', width: 144 },\n        { \n            field: 'usage', \n            valueFormatter: (params) => {\n                const valueFormatted = Number(params.value * 100).toLocaleString();\n                return `${valueFormatted} %`;\n            },\n        }\n    ]\n\n    const length = rows.filter(row => row.usage > 0.8).length;\n    const color = length ? 'red' : 'green'\n\n    const content = <Content \n        rows={rows} columns={columns}\n        getCellClassName={params => {\n            if (params.field === 'usage'){\n                return params.value < 0.8 ? 'UP' : 'DOWN';\n            }\n        }}\n        sortModel={[\n            {\n                field: 'usage',\n                sort: 'desc',\n            },\n        ]}\n    />;\n    const header = length + ' / ' + rows.length + ' high-usage ' + label;\n\n    return { icon, label, color, content, header };\n}\n\nfunction StorageServers() {\n    const icon = <Storage />;\n    const label = 'StorageServers';\n    const data = require('./data/' + label + '.json');\n\n    const rows = data.map((row, id) => ({\n        id: id,\n        name: row.attributes.name,\n        status: row.attributes.storageServerState,\n    }));\n    const columns = [\n        { field: 'id' },\n        { field: 'name', width: 200 },\n        { field: 'status' },\n    ]\n\n    const length = rows.filter(row => row.status === 'DOWN').length;\n    const color = length ? 'red' : 'green'\n\n    const content = <Content \n        rows={rows} columns={columns}\n        getCellClassName={params => params.value}\n    />;\n    const header = length + ' / ' + rows.length + ' down remote ' + label;\n\n    return { icon, label, color, content, header };\n}\n\nexport { DiskPools, StorageServers, Tapes };","import React from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Typography, Grid } from '@material-ui/core';\nimport { Create, Backup, PriorityHigh } from '@material-ui/icons';\nimport { DataGrid } from '@material-ui/data-grid';\n\nimport CommentBox from './CommentBox';\nimport Priority from './Priority';\nimport Summary from './Summary';\nimport { DiskPools, StorageServers, Tapes } from './DiskPools';\n\n// function Priority(n, data) {\n//     const icon = <PriorityHigh />;\n//     const label = 'Priority' + n;\n\n//     const rows = data.map((row, id) => ({\n//         id: id,\n//         number: row.number,\n//         description: row.short_description\n//     }));\n//     const columns = 'id number description'.split(' ').map(key => ({\n//         field: key,\n//         width: 200,\n//     }));\n//     const content = <DataGrid rows={rows} columns={columns} autoHeight />;\n\n//     const color = null // rows.length ? 'red' : 'green';\n//     const header = '' // rows.length + ' active ' + label + ' incidents';\n\n//     return { icon, label, color, content, header };\n// }\n\nfunction Jobs() {\n    const icon = <Backup />;\n    const label = 'Jobs';\n    const data = require('./data/' + label + '.json');\n\n    const rows = data.map((row, id) => ({\n        id: id,\n        jobId: row.attributes.jobId,\n        clientName: row.attributes.clientName,\n        status: row.attributes.status\n    }));\n    const columns = 'id jobId clientName status'.split(' ').map(key => ({\n        field: key,\n        width: 200,\n    }));\n    const content = <DataGrid rows={rows} columns={columns} autoHeight />\n\n    var color = 'red';\n    if (rows.length < 10) color = 'green';\n    else if (rows.length < 20) color = 'darkGoldenRod';\n    const header = rows.length + ' failed ' + label;\n\n    return { icon, label, color, content, header };\n}\n\nfunction Temp(x) {\n    return { label: x, icon: <Backup />, header: 'TODO' };\n}\n\nconst getPanels = async () => await Promise.all([\n    // StickyNotes(),\n    Priority(1, []),\n    Priority(2, []),\n    Jobs(),\n    StorageServers(),\n    Tapes(),\n    DiskPools(true),\n    DiskPools(false),\n    Temp('MemCheck'),\n    Temp('FailedJobs'),\n    Temp('WaitingJobs'),\n    Temp('OverdueJobs'),\n    Temp('SLPs'),\n    Temp('DiskSpace'),\n    Temp('DownedServers'),\n    Temp('DownedNetworks'),\n    Temp('DownedApplications'),    \n]);\n\nfunction StickyNotes(panels, setValue) {\n    const icon = <Create />;\n    const label = 'StickyNotes';\n    const content = <div>\n        <br />\n        <Summary panels={panels} setValue={setValue} />\n        <br />\n        <CommentBox />\n    </div>;\n\n    return { icon, label, content };\n}\n\n// panels.unshift(StickyNotes());\n\nexport default getPanels;\nexport { Summary, StickyNotes, Priority, Jobs, StorageServers, Tapes, DiskPools, Temp };","import React from 'react';\n\nclass Clock extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = { date: new Date() };\n    }\n  \n    componentDidMount() {\n      this.timerID = setInterval(() => this.tick(), 1000);\n    }\n  \n    componentWillUnmount() {\n      clearInterval(this.timerID);\n    }\n  \n    tick() {\n      this.setState({\n        date: new Date()\n      });\n    }\n  \n    render() {\n      return (\n        <div>\n            Current Time: {this.state.date.toLocaleTimeString()}\n        </div>\n      );\n    }\n  }\n\n  export default Clock;","import React from 'react';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport { Button, Avatar } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst oauth2 = require('./oauth2.json');\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  small: {\n    width: theme.spacing(3),\n    height: theme.spacing(3),\n  },\n  large: {\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n  },\n}));\n\nfunction Login(props) {\n    const classes = useStyles();\n\n    const [image, setImage] = React.useState(null);\n    const responseGoogle = (response) => {\n        console.log(response);\n        setImage(response.profileObj.imageUrl);\n        if (response.profileObj.email.endsWith('@steelcase.com')){\n            props.setLoggedin(true);\n        }\n\n    }\n    const onLogoutSuccess = (response) => {\n        console.log(response);\n        setImage(null);\n        props.setLoggedin(false);\n    }\n\n    return image ? (\n        <GoogleLogout\n            clientId={oauth2.web.client_id}\n            buttonText=\"Logout\"\n            onLogoutSuccess={onLogoutSuccess}\n            render={renderProps => (\n                <Button\n                    onClick={renderProps.onClick}\n                    disabled={renderProps.disabled}\n                    startIcon={<Avatar className={classes.small} src={image} />}\n\n                    color='inherit'\n                    variant='outlined'\n                >\n                    Logout\n                </Button>\n            )}\n        />\n    ) : (\n        <GoogleLogin\n            clientId={oauth2.web.client_id}\n            buttonText=\"Login\"\n            onSuccess={responseGoogle}\n            cookiePolicy={'single_host_origin'}\n            render={renderProps => (\n                <Button\n                    onClick={renderProps.onClick}\n                    disabled={renderProps.disabled}\n                    startIcon={<Avatar className={classes.small} src={'https://img-authors.flaticon.com/google.jpg'} />}\n\n                    color='inherit'\n                    variant='outlined'\n                >\n                    Login\n                </Button>\n            )}\n        />\n    );\n}\n\nexport default Login;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { createMuiTheme, makeStyles, useTheme, withStyles } from '@material-ui/core/styles';\nimport { Drawer, AppBar, Toolbar, List, CssBaseline, Typography, Divider, IconButton, ListItem, ListItemIcon, ListItemText, Paper, ThemeProvider } from '@material-ui/core';\nimport { Menu, ChevronLeft, Brightness3, Brightness7, Create, DiscFull, Backup, Storage, PriorityHigh, Home, GitHub } from '@material-ui/icons';\nimport { DataGrid } from '@material-ui/data-grid';\n\nimport getPanels, { Summary, StickyNotes, Priority, Jobs, StorageServers, Tapes, DiskPools, Temp } from './panels/panels';\n\nimport Clock from './Clock';\nimport Login from './Login';\n\nconst drawerWidth = 240;\nconst useStyles = theme => ({\n    root: {\n        flexGrow: 1,\n        display: 'flex',\n        height: '100%',\n    },\n    toolbar: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        padding: theme.spacing(0, 1),\n        // necessary for content to be below app bar\n        ...theme.mixins.toolbar,\n    },\n    content: {\n        flexGrow: 1,\n        padding: theme.spacing(3),\n    },\n    title: {\n        flexGrow: 1,\n    },\n});\nexport const light = {\n    palette: {\n        type: \"light\"\n    }\n};\nexport const dark = {\n    palette: {\n        type: \"dark\"\n    }\n};\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: 'StickyNotes',\n            theme: false,\n            panels: [],\n            loggedin: false,\n        }\n    }\n    \n    switchTheme = () => this.setState({ theme: !this.state.theme });\n    setValue = value => this.setState({ value });\n    setLoggedin = loggedin => this.setState({ loggedin });\n\n    async componentDidMount() {\n        const panels = await getPanels();\n        panels.unshift(StickyNotes(panels, this.setValue));\n        this.setState({ panels });\n    }\n\n    Top(){\n        const { classes } = this.props;\n        return (\n            <AppBar>\n                <Toolbar>\n    \n                    <IconButton\n                        color=\"inherit\"\n                        onClick={() => this.setValue('StickyNotes')}\n                    >\n                        <Home fontSize='large' />\n                    </IconButton>\n                    \n                    <Typography variant=\"h4\" className={classes.title}>\n                        TechOps Dashboard\n                    </Typography>\n    \n                    <Typography variant=\"h6\" className={classes.title}>\n                        Last Updated: {new Date().toLocaleTimeString()}\n                    </Typography>\n                    \n                    <Typography variant=\"h6\" className={classes.title}>\n                        <Clock />\n                    </Typography>\n    \n                    <IconButton\n                        color=\"inherit\"\n                        target='_blank'\n                        href='https://steelcase.visualstudio.com/Enterprise%20TechOps/_git/TeamDashboard'\n                    >\n                        <GitHub fontSize='large' />\n                    </IconButton>\n    \n                    <IconButton\n                        color=\"inherit\"\n                        onClick={this.switchTheme}\n                    >\n                        {this.state.theme ? \n                            <Brightness3 fontSize='large' /> : \n                            <Brightness7 fontSize='large' />}\n                    </IconButton>\n\n                    <Login setLoggedin={this.setLoggedin} />\n                </Toolbar>\n            </AppBar>\n        );\n    }\n\n    Bottom() {\n        const { classes } = this.props;\n        const { panels, loggedin } = this.state;\n        const row = panels.find(panel => panel.label === this.state.value);\n\n        const colors = [\n            'green',\n            'darkGoldenRod',\n            'red',\n        ]\n\n        if (!loggedin){\n            return (\n                <div className={classes.content}>\n                    <div className={classes.toolbar} />\n\n                    <Typography variant=\"h4\">\n                        Not logged in to a Steelcase account\n                    </Typography>\n                </div>\n            );\n        }\n        \n        return !panels.length ? (\n            <div className={classes.content}>\n                <div className={classes.toolbar} />\n\n                <Typography variant=\"h4\">\n                    Loading...\n                </Typography>\n            </div>\n        ) : (\n            <div className={classes.content}>\n                <div className={classes.toolbar} />\n\n                <Typography variant=\"h2\" className={classes.title}>\n                    { row.label }\n                </Typography>\n\n                <Typography variant=\"h4\" style={{ color: row.color }}>\n                    { row.header }                            \n                </Typography>\n                \n                { row.content }\n            </div>\n        );\n    }\n\n    render() {\n        const { classes } = this.props;\n        const { panels } = this.state;\n        const appliedTheme = createMuiTheme(this.state.theme ? light : dark);\n\n        return (\n            <ThemeProvider theme={appliedTheme}>\n                <div className={classes.root}>\n                    <CssBaseline />\n\n                    {this.Top()}\n                    {this.Bottom()}\n                </div>\n            </ThemeProvider>\n        );\n    }\n}\n\n// export default withStyles(useStyles)(App);\nconsole.log('hi')\nexport default Login;\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(\n    <StrictMode>\n        <App />\n    </StrictMode>,\n    rootElement\n);","import React from 'react';\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport { Typography, Button } from '@material-ui/core';\nimport { PriorityHigh, Refresh } from '@material-ui/icons';\nimport { DataGrid } from '@material-ui/data-grid';\n\nconst axios = require('axios');\n// const snowurl = 'https://support.steelcase.com/api/now/v1/table/incident';\nconst snowurl = 'https://steelcasetemp.service-now.com/api/now/table/incident';\n\nconst creds = require('./nbu-login.json');\nconst user = creds.userName;\nconst pwd = creds.password;\nconst headers = {\n    \"Content-Type\":\"application/json\",\n    \"Accept\":\"application/json\",\n    'Authorization': 'Basic ' + Buffer\n        .from(user + ':' + pwd)\n        .toString('base64'),\n}\n\nclass IncGrid extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: [],\n            ready: false,\n        };\n    }\n\n    componentDidMount() {\n        console.log(this.props)\n        var params = {\n            priority: 1,\n            active: true,\n            // assignment_group: 'TechOps',\n            // sysparm_limit: 1,\n        };\n        if (this.props.value === 2) {\n            params = {\n                priority: 2,\n                active: true,\n                assignment_group: 'TechOps',\n                // sysparm_limit: 1,\n            };\n        }\n        axios.get(snowurl, { headers, params })\n            .then(x => {\n                const data = x.data.result;\n                console.log(data);\n                this.setState({ data });\n            })\n            .catch(error => {\n                console.log(error);\n                // const data = [];\n                // this.setState({ data });\n            })\n            .finally(() => {\n                const ready = true;\n                this.setState({ ready });  \n            })\n    }\n\n    render() {\n        if (!this.state.ready) {\n            return <div>Waiting</div>;\n        }\n\n        const rows = this.state.data.map((row, id) => ({\n            id: id,\n            number: row.number,\n            description: row.short_description\n        }));\n        const columns = 'id number description'.split(' ').map(key => ({\n            field: key,\n            width: 200,\n        }));\n        return <DataGrid rows={rows} columns={columns} autoHeight />;\n    }\n}\n\nasync function Priority(n) {\n    const params = n === 1 ? {\n        active: true,\n        priority: 1,\n    } : {\n        active: true,\n        priority: 2,\n        assignment_group: 'TechOps',\n    };\n    const data = await axios.get(snowurl, { headers, params })\n        .then(resp => resp.data.result)\n        .catch(error => [])\n\n    const rows = data.map((row, id) => ({\n        id: id,\n        number: row.number,\n        description: row.short_description\n    }));\n    const columns = 'id number description'.split(' ').map(key => ({\n        field: key,\n        width: 200,\n    }));\n    const content = <DataGrid rows={rows} columns={columns} autoHeight />;\n\n    const icon = <PriorityHigh />;\n    const label = 'Priority' + n;\n\n    const color = rows.length ? 'red' : 'green';\n    const header = rows.length + ' active ' + label + ' incidents';\n\n    return { icon, label, color, content, header };\n}\n\nexport default Priority;"],"sourceRoot":""}